package com.sndo.dmp.adsearch.index;

import com.sndo.dmp.adsearch.index.assignment.AbstractAssignment;
import com.sndo.dmp.adsearch.index.query.TermQuery;
import com.sndo.dmp.adsearch.index.term.AbstractTerm;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;

/**
 * Created by liusheng on 17-10-13.
 */
public class InvertedIndex {
    private static final Logger LOG = LoggerFactory.getLogger(InvertedIndex.class);

    private Map<Conjunction, Set<String>> conjunctions = new ConcurrentHashMap<Conjunction, Set<String>>();

    private Map<Integer, Map<AbstractTerm, Map<Operator, Set<Conjunction>>>> layeredTermMap =
            new ConcurrentSkipListMap<Integer, Map<AbstractTerm, Map<Operator, Set<Conjunction>>>>();

    public void add(List<Conjunction> conjunctionList, String id) {

        for (Conjunction conjunction : conjunctionList) {

            // 一层索引
            Set<String> ids = conjunctions.get(conjunction);
            if (ids == null) {
                ids = new HashSet<String>();
                conjunctions.put(conjunction, ids);
            }
            ids.add(id);

            // 二层索引
            Integer layer = conjunction.getAssignments().size();
            Map<AbstractTerm, Map<Operator, Set<Conjunction>>> termMap = layeredTermMap.get(layer);

            if (termMap == null) {
                termMap = new ConcurrentHashMap<AbstractTerm, Map<Operator, Set<Conjunction>>>();
                layeredTermMap.put(layer, termMap);
            }

            for (AbstractAssignment assignment : conjunction.getAssignments()) {
                Set<AbstractTerm> termSet = assignment.createTerm();
                for (AbstractTerm term : termSet) {
                    Map<Operator, Set<Conjunction>> operatorConjunctionMap = termMap.get(term);

                    if (operatorConjunctionMap == null) {
                        operatorConjunctionMap = new ConcurrentHashMap<Operator, Set<Conjunction>>();
                        termMap.put(term, operatorConjunctionMap);
                    }

                    Set<Conjunction> cSet = operatorConjunctionMap.get(assignment.getOperator());
                    if (cSet == null) {
                        cSet = new HashSet<Conjunction>();
                        operatorConjunctionMap.put(assignment.getOperator(), cSet);
                    }
                    cSet.add(conjunction);
                }
            }
        }
    }


    public void remove(Set<String> ids) {
        // 移除第一层
        Set<Conjunction> removedConjunctions = new HashSet<Conjunction>();

        for (Map.Entry<Conjunction, Set<String>> entry : conjunctions.entrySet()) {
            for (String id : ids) {
                entry.getValue().remove(id);
                if (entry.getValue().size() == 0) {
                    removedConjunctions.add(entry.getKey());
                    conjunctions.remove(entry.getKey());
                }
            }
        }
        // 第二层
        for (Conjunction removedConjunction : removedConjunctions) {
            Integer layer = removedConjunction.getAssignments().size();
            Map<AbstractTerm, Map<Operator, Set<Conjunction>>> termMap = layeredTermMap.get(layer);
            for (Map.Entry<AbstractTerm, Map<Operator, Set<Conjunction>>> termMapEntry : termMap.entrySet()) {
                AbstractTerm term = termMapEntry.getKey();
                Map<Operator, Set<Conjunction>> operatorConjunctionMap = termMapEntry.getValue();
                for (Map.Entry<Operator, Set<Conjunction>> operatorConjunctionEntry : operatorConjunctionMap.entrySet()) {
                    Operator operator = operatorConjunctionEntry.getKey();
                    Set<Conjunction> conjunctionSet = operatorConjunctionEntry.getValue();
                    conjunctionSet.remove(removedConjunction);
                    if (conjunctionSet.size() == 0) {
                        operatorConjunctionMap.remove(operator);
                    }
                }
                if (operatorConjunctionMap.size() == 0) {
                    termMap.remove(term);
                }
            }
            if (termMap.size() == 0) {
                layeredTermMap.remove(layer);
            }

        }
    }

    public Set<String> query(Set<AbstractTerm> terms) {
        Integer maxLayer = terms.size();
        Set<String> ids = new HashSet<String>();
        for (Map.Entry<Integer, Map<AbstractTerm, Map<Operator, Set<Conjunction>>>> entry : layeredTermMap.entrySet()) {
            Integer currentLayer = entry.getKey();
            if (currentLayer > maxLayer) break;
            Map<Conjunction, Integer> matchCountMap = new HashMap<Conjunction, Integer>();

            /** 对于 NE 的情况 直接走 Map< AbstractTerm, T >  */
            for (AbstractTerm term : terms) {
                if (entry.getValue().containsKey(term)) {



                    Set<Conjunction> matchSet = term.match(term.getValue(), entry.getValue().get(term));
                    for (Conjunction matchC : matchSet) {
                        Integer count = matchCountMap.get(matchC);
                        if (count == null) {
                            count = 1;
                        } else {
                            count++;
                        }
                        matchCountMap.put(matchC, count);
                    }
                }
            }

            for (Map.Entry<Conjunction, Integer> cCountEntry : matchCountMap.entrySet()) {
                if (cCountEntry.getValue() == currentLayer) {
                    ids.addAll(conjunctions.get(cCountEntry.getKey()));
                }
            }
        }
        return ids;
    }

}
